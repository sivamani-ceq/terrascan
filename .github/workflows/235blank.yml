name: 'Terraform'

env:
##   APP_ID: APPID00001
  APP_ID: window_non_prod-5

on:
  workflow_dispatch:
    inputs:
      infra_env:
        description: 'Environment Name'
        required: true
        default: 'qa'

jobs:

  terraform:
    name: "terraform"
    runs-on: ubuntu-latest


    defaults:
      run:
        shell: bash
        
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: "Setting Environment"
      env:
        QA_ENV: ${{ contains(github.event.inputs.infra_env, 'qa') }}
        UAT_ENV: ${{ contains(github.event.inputs.infra_env, 'uat') }}
        PROD_ENV: ${{ contains(github.event.inputs.infra_env, 'prod') }}
      run: |
        if ${QA_ENV} == true; then
          echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
          echo "TFSTATE_RG=ceq-vm-provissioning-tfstate" >> $GITHUB_ENV
          echo "TFSTATE_STORAGE_ACCOUNT=ceqvmprovisiontfstate" >> $GITHUB_ENV
          echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
          echo "ENV=qa" >> $GITHUB_ENV
        elif ${PROD_ENV} == true;
        then
          echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_GITHUB_PROD01_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_GITHUB_PROD01_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_GITHUB_PROD01_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_GITHUB_PROD01_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
          echo "TFSTATE_RG=RG-2W-IMAGE-PROD" >> $GITHUB_ENV
          echo "TFSTATE_STORAGE_ACCOUNT=mcdposttaskprodstorage" >> $GITHUB_ENV
          echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
          echo "ENV=prod" >> $GITHUB_ENV
        elif ${UAT_ENV} == true;
        then
          echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_GITHUB_NON_PROD_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_GITHUB_NON_PROD_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_GITHUB_NON_PROD_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_GITHUB_NON_PROD_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
          echo "TFSTATE_RG=ceq-vm-provissioning-tfstate" >> $GITHUB_ENV
          echo "TFSTATE_STORAGE_ACCOUNT=ceqvmtfstatenonprod" >> $GITHUB_ENV
          echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
          echo "ENV=uat" >> $GITHUB_ENV
        else
          echo "environment not supported"
          exit 1
        fi
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.15.1
    
    - name: Setup git global config
      run:  git config --global url."https://oauth2:${{secrets.PAT_TOKEN}}@github.com".insteadOf https://github.com
      
    - name: Terraform Scan Install
      run: curl --location https://github.com/accurics/terrascan/releases/download/v1.9.0/terrascan_1.9.0_Linux_x86_64.tar.gz --output terrascan.tar.gz && tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz && install terrascan /usr/local/bin && rm terrascan && terrascan

    - name: Run Terrascan Scan
      run: terrascan scan -t azure
      continue-on-error: true
